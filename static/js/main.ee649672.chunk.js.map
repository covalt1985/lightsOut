{"version":3,"sources":["Components/Board/solvedBoard.js","Components/Cell/Cell.js","Components/Input/Input.js","Components/Button/Button.js","Components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","_super","call","handleClick","bind","assertThisInitialized","flipCellsAround","x","y","board","flipCell","hintBoard","mainBoardClasses","concat","isLit","showHint","react_default","a","createElement","className","onClick","Component","solvedBoard","length","push","Array","fill","splice","Input","htmlFor","type","id","onChange","handleChecked","checked","Button","restart","hasWon","Board","state","setInitialBoardState","JSON","parse","stringify","restartBoard","initialBoard","nrows","ncols","unFLippedSolvedBoard","_this2","flippedSolvedBoard","toConsumableArray","count","randomNumber","Math","floor","random","setState","newBoard","checkIfWin","_this3","singleRow","forEach","row","rowIndex","cell","cellIndex","Components_Cell_Cell","key","every","newBoardAfterReset","initialShuffle","e","target","Components_Button_Button","createBoard","style","display","Components_Input_Input","defaultProps","App","Components_Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee649672.chunk.js","sourcesContent":["export const solvedBoard = [];\r\nwhile (solvedBoard.length < 5) {\r\n  solvedBoard.push(Array(5).fill(false));\r\n}\r\n\r\nsolvedBoard[0].splice(0, 2, true, true);\r\nsolvedBoard[1].splice(0, 5, true, true, false, true, true);\r\nsolvedBoard[2].splice(2, 3, true, true, true);\r\nsolvedBoard[3].splice(1, 3, true, true, true);\r\nsolvedBoard[4].splice(1, 4, true, true, false, true);\r\n","import React, { Component } from 'react';\n\nimport './Cell.css';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // flip this cell, cells around and flips cell in hintBoard\n    this.props.flipCellsAround(this.props.x, this.props.y, this.props.board);\n    this.props.flipCell(this.props.x, this.props.y, this.props.hintBoard);\n  }\n\n  render() {\n    let mainBoardClasses = `board_cell ${\n      this.props.isLit ? 'board_cell-lit' : ''\n    } ${\n      this.props.showHint && this.props.hintBoard[this.props.x][this.props.y]\n        ? 'board_cell-hint'\n        : ''\n    }`;\n    return <td className={`${mainBoardClasses}`} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\r\n\r\nimport './input.css';\r\n\r\nclass Input extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"boardContainer_inputs-input\">\r\n        <label className=\"boardContainer_inputs-label\" htmlFor=\"hintCheckbox\">\r\n          Hint?\r\n        </label>\r\n        <input\r\n          className=\"boardContainer_inputs-checkbox\"\r\n          type=\"checkbox\"\r\n          id=\"hintCheckbox\"\r\n          onChange={this.props.handleChecked}\r\n          checked={this.props.showHint}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\n\r\nimport './button.css';\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.props.restart();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className={this.props.hasWon ? 'winButton' : ''}\r\n        onClick={this.handleClick}>\r\n        Restart\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\n\nimport Cell from '../Cell/Cell';\nimport './Board.css';\n\n//import board with solution\nimport { solvedBoard } from './solvedBoard';\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon: false,\n      board: this.setInitialBoardState(),\n      hintBoard: JSON.parse(JSON.stringify(solvedBoard)),\n      showHint: false,\n    };\n\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.restartBoard = this.restartBoard.bind(this);\n    this.handleChecked = this.handleChecked.bind(this);\n  }\n\n  //create pure board\n  setInitialBoardState() {\n    let initialBoard = [];\n\n    while (initialBoard.length < this.props.nrows) {\n      initialBoard.push(Array(this.props.ncols).fill(true));\n    }\n\n    return initialBoard;\n  }\n\n  //shuffle playing and solved board with the same moves\n  initialShuffle(board, unFLippedSolvedBoard) {\n    const flippedSolvedBoard = [...unFLippedSolvedBoard];\n    let count = 0;\n    const randomNumber = () => Math.floor(Math.random() * this.props.nrows);\n\n    while (count < 10) {\n      let y = randomNumber();\n      let x = randomNumber();\n\n      this.flipCellsAround(y, x, board);\n      this.flipCell(y, x, flippedSolvedBoard);\n      count = count + 1;\n    }\n    this.setState({ hintBoard: flippedSolvedBoard });\n  }\n\n  //flip clicked cell, and cells around\n  flipCellsAround(x, y, board) {\n    let newBoard = board;\n\n    board = this.flipCell(x, y, board);\n    board = this.flipCell(x - 1, y, board);\n    board = this.flipCell(x + 1, y, board);\n    board = this.flipCell(x, y - 1, board);\n    board = this.flipCell(x, y + 1, board);\n\n    this.setState(() => ({\n      board: newBoard,\n    }));\n    return !this.state.hasWon ? this.checkIfWin() : '';\n  }\n\n  flipCell(x, y, board) {\n    let newBoard = board;\n    const ncols = 5;\n    const nrows = 5;\n\n    // if this coord is actually on board, flip it\n\n    if (y >= 0 && y < ncols && x >= 0 && x < nrows) {\n      newBoard[x][y] = !newBoard[x][y];\n    }\n    return newBoard;\n  }\n\n  //board to render\n  createBoard() {\n    const board = [];\n    let singleRow = [];\n\n    this.state.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        singleRow.push(\n          <Cell\n            x={rowIndex}\n            y={cellIndex}\n            key={`${rowIndex}-${cellIndex}`}\n            flipCellsAround={this.flipCellsAround}\n            isLit={cell}\n            board={this.state.board}\n            flipCell={this.flipCell}\n            hintBoard={this.state.hintBoard}\n            showHint={this.state.showHint}\n          />\n        );\n      });\n      board.push(<tr key={rowIndex}>{singleRow}</tr>);\n      singleRow = [];\n    });\n    return (\n      <table>\n        <tbody>{board}</tbody>\n      </table>\n    );\n  }\n\n  // win when every cell is false\n  checkIfWin() {\n    if (this.state.board.every(row => row.every(cell => !cell))) {\n      this.setState(() => ({ hasWon: true }));\n    }\n  }\n\n  restartBoard() {\n    const newBoardAfterReset = this.setInitialBoardState();\n    this.initialShuffle(\n      newBoardAfterReset,\n      JSON.parse(JSON.stringify(solvedBoard))\n    );\n\n    this.setState({\n      board: newBoardAfterReset,\n      hasWon: false,\n      showHint: false,\n    });\n  }\n\n  handleChecked(e) {\n    e.target.checked\n      ? this.setState({ showHint: true })\n      : this.setState({ showHint: false });\n  }\n\n  componentDidMount() {\n    this.initialShuffle(this.state.board, this.state.hintBoard);\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"neonContainer\">\n          <div className=\"neonContainer_lights\">Lights </div>\n          <div className=\"neonContainer_out\">Out </div>\n        </div>\n\n        {this.state.hasWon ? (\n          <div className=\"neonContainer\">\n            <div className=\"neonContainer_lights\">You</div>{' '}\n            <div className=\"neonContainer_out\"> Win! </div>\n            <Button\n              hasWon={this.state.hasWon}\n              restart={this.restartBoard}></Button>\n          </div>\n        ) : (\n          <div className=\"boardContainer\">\n            <div className=\"boardContainer_board\">{this.createBoard()}</div>\n          </div>\n        )}\n\n        <p>Turn off the lights!</p>\n        <div\n          className=\"boardContainer_inputs\"\n          style={this.state.hasWon ? { display: 'none' } : {}}>\n          <Button\n            hasWon={this.state.hasWon}\n            restart={this.restartBoard}></Button>\n          <Input\n            handleChecked={this.handleChecked}\n            showHint={this.state.showHint}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Components/Board/Board';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}