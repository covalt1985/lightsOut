{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","_super","call","handleClick","bind","assertThisInitialized","flipCellsAround","x","y","board","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","setInitialBoardState","initialBoard","length","nrows","push","Array","ncols","fill","initialShuffle","_this2","count","randomNumber","Math","floor","random","flipCell","_this3","singleRow","forEach","row","rowIndex","cell","cellIndex","src_Cell_0","key","concat","newBoard","setState","checkIfWin","_this$props","every","createBoard","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ytBAkCeA,0CAhBd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,YAAcN,EAAKM,YAAYC,KAAjBN,OAAAO,EAAA,EAAAP,CAAAD,IAFDA,iDAKnB,WAECG,KAAKJ,MAAMU,gBAAgBN,KAAKJ,MAAMW,EAAGP,KAAKJ,MAAMY,EAAGR,KAAKJ,MAAMa,6BAGnE,WACC,IAAIC,EAAU,QAAUV,KAAKJ,MAAMe,MAAQ,YAAc,IACzD,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAAShB,KAAKG,qBAb5Bc,4dCbbC,0CAML,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IAClBrB,EAAAI,EAAAC,KAAAF,KAAMJ,IAEDU,gBAAkBT,EAAKS,gBAAgBF,KAArBN,OAAAO,EAAA,EAAAP,CAAAD,IAEvBA,EAAKsB,MAAQ,CACZC,QAAQ,EACRX,MAAOZ,EAAKwB,wBAPKxB,0DAanB,WAGC,IAFA,IAAIyB,EAAe,GAEZA,EAAaC,OAASvB,KAAKJ,MAAM4B,OACvCF,EAAaG,KAAKC,MAAM1B,KAAKJ,MAAM+B,OAAOC,MAAK,IAKhD,OAFA5B,KAAK6B,eAAeP,GAEbA,gCAGR,SAAeb,GAId,IAJqB,IAAAqB,EAAA9B,KACjB+B,EAAQ,EACNC,EAAe,kBAAMC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKlC,MAAM4B,QAE1DO,EAAQ,IAAI,CAClB,IAAIvB,EAAIwB,IACJzB,EAAIyB,IAERhC,KAAKoC,SAAS5B,EAAGD,EAAGE,GACpBsB,GAAgB,8BAIlB,WAAc,IAAAM,EAAArC,KACPS,EAAQ,GACV6B,EAAY,GAmBhB,OAjBAtC,KAAKmB,MAAMV,MAAM8B,QAAQ,SAACC,EAAKC,GAC9BD,EAAID,QAAQ,SAACG,EAAMC,GAClBL,EAAUb,KACTb,EAAAC,EAAAC,cAAC8B,EAAD,CACCrC,EAAGkC,EACHjC,EAAGmC,EACHE,IAAG,GAAAC,OAAKL,EAAL,KAAAK,OAAiBH,GACpBrC,gBAAiB+B,EAAK/B,gBACtBK,MAAO+B,EACPjC,MAAO4B,EAAKlB,MAAMV,WAIrBA,EAAMgB,KAAKb,EAAAC,EAAAC,cAAA,MAAI+B,IAAKJ,GAAWH,IAC/BA,EAAY,KAIZ1B,EAAAC,EAAAC,cAAA,aACCF,EAAAC,EAAAC,cAAA,aAAQL,mCAMX,SAAgBD,EAAGD,EAAGE,GACrB,IAAIsC,EAAWtC,EAEfA,EAAQT,KAAKoC,SAAS5B,EAAGD,EAAGE,GAC5BA,EAAQT,KAAKoC,SAAS5B,EAAI,EAAGD,EAAGE,GAChCA,EAAQT,KAAKoC,SAAS5B,EAAI,EAAGD,EAAGE,GAChCA,EAAQT,KAAKoC,SAAS5B,EAAGD,EAAI,EAAGE,GAChCA,EAAQT,KAAKoC,SAAS5B,EAAGD,EAAI,EAAGE,GAEhCT,KAAKgD,SAAS,iBAAO,CACpBvC,MAAOsC,KAIR/C,KAAKiD,qCAGN,SAASzC,EAAGD,EAAGE,GACd,IAAIsC,EAAWtC,EADMyC,EAEElD,KAAKJ,MAAtB+B,EAFeuB,EAEfvB,MAAOH,EAFQ0B,EAER1B,MAOb,OAHIjB,GAAK,GAAKA,EAAIoB,GAASnB,GAAK,GAAKA,EAAIgB,IACxCuB,EAASvC,GAAGD,IAAMwC,EAASvC,GAAGD,IAExBwC,4BAGR,WACK/C,KAAKmB,MAAMV,MAAM0C,MAAM,SAACX,GAAD,OAASA,EAAIW,MAAM,SAACT,GAAD,OAAWA,OACxD1C,KAAKgD,SAAS,iBAAO,CAAE5B,QAAQ,2BAIjC,WACC,OACCR,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,SAGAf,KAAKmB,MAAMC,OACXR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,OADD,IACiCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,WAGjCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASf,KAAKoD,eAG9BxC,EAAAC,EAAAC,cAAA,+CA5HgBG,aAAdC,EACEmC,aAAe,CACrB7B,MAAO,EACPG,MAAO,GA+HMT,udCtHAoC,oJATb,WACE,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,cAJUtC,aCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d932570d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n constructor(props) {\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n }\n\n handleClick() {\n  // call up to the board to flip cells around this cell\n  this.props.flipCellsAround(this.props.x, this.props.y, this.props.board);\n }\n\n render() {\n  let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : ''); //bez konkatenacji\n  return <td className={classes} onClick={this.handleClick} />;\n }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\n\nimport Cell from './Cell';\nimport './Board.css';\nclass Board extends Component {\n static defaultProps = {\n  nrows: 5,\n  ncols: 5,\n };\n\n constructor(props) {\n  super(props);\n\n  this.flipCellsAround = this.flipCellsAround.bind(this);\n\n  this.state = {\n   hasWon: false,\n   board: this.setInitialBoardState(),\n  };\n }\n\n // Sets winnable board from 10 random moves\n\n setInitialBoardState() {\n  let initialBoard = [];\n\n  while (initialBoard.length < this.props.nrows) {\n   initialBoard.push(Array(this.props.ncols).fill(false));\n  }\n\n  this.initialShuffle(initialBoard);\n\n  return initialBoard;\n }\n\n initialShuffle(board) {\n  let count = 0;\n  const randomNumber = () => Math.floor(Math.random() * this.props.nrows);\n\n  while (count < 10) {\n   let y = randomNumber();\n   let x = randomNumber();\n\n   this.flipCell(y, x, board);\n   count = count + 1;\n  }\n }\n\n createBoard() {\n  const board = [];\n  let singleRow = [];\n\n  this.state.board.forEach((row, rowIndex) => {\n   row.forEach((cell, cellIndex) => {\n    singleRow.push(\n     <Cell\n      x={rowIndex}\n      y={cellIndex}\n      key={`${rowIndex}-${cellIndex}`}\n      flipCellsAround={this.flipCellsAround}\n      isLit={cell}\n      board={this.state.board}\n     />\n    );\n   });\n   board.push(<tr key={rowIndex}>{singleRow}</tr>);\n   singleRow = [];\n  });\n\n  return (\n   <table>\n    <tbody>{board}</tbody>\n   </table>\n  );\n }\n\n //flip clicked cell, and cells around\n flipCellsAround(y, x, board) {\n  let newBoard = board;\n\n  board = this.flipCell(y, x, board);\n  board = this.flipCell(y - 1, x, board);\n  board = this.flipCell(y + 1, x, board);\n  board = this.flipCell(y, x - 1, board);\n  board = this.flipCell(y, x + 1, board);\n\n  this.setState(() => ({\n   board: newBoard,\n  }));\n\n  // win when every cell is turned off\n  this.checkIfWin();\n }\n\n flipCell(y, x, board) {\n  let newBoard = board;\n  let { ncols, nrows } = this.props;\n\n  // if this coord is actually on board, flip it\n\n  if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n   newBoard[y][x] = !newBoard[y][x];\n  }\n  return newBoard;\n }\n\n checkIfWin() {\n  if (this.state.board.every((row) => row.every((cell) => !cell))) {\n   this.setState(() => ({ hasWon: true }));\n  }\n }\n\n render() {\n  return (\n   <div>\n    <div className=\"container\">\n     <div className=\"neon\">Lights </div>\n     <div className=\"flux\">Out </div>\n    </div>\n\n    {this.state.hasWon ? (\n     <div className=\"container\">\n      <div className=\"neon\">You</div> <div className=\"flux\"> Win! </div>\n     </div>\n    ) : (\n     <div className=\"Board\">{this.createBoard()}</div>\n    )}\n\n    <h3>Turn off the lights {`:)`}</h3>\n   </div>\n  );\n }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}