{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","_super","call","handleClick","bind","assertThisInitialized","flipCellsAround","x","y","board","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","restartBoard","state","hasWon","setInitialBoardState","initialBoard","length","nrows","push","Array","ncols","fill","_this2","count","randomNumber","Math","floor","random","_this3","singleRow","forEach","row","rowIndex","cell","cellIndex","src_Cell_0","key","concat","newBoard","flipCell","setState","_this$props","every","initialShuffle","checkIfWin","createBoard","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1056b901.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n constructor(props) {\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n }\n\n handleClick() {\n  // call up to the board to flip cells around this cell\n  this.props.flipCellsAround(this.props.x, this.props.y, this.props.board);\n }\n\n render() {\n  let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : ''); //bez konkatenacji\n  return <td className={classes} onClick={this.handleClick} />;\n }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\n\nimport Cell from './Cell';\nimport './Board.css';\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.restartBoard = this.restartBoard.bind(this);\n\n    this.state = {\n      hasWon: false,\n      board: this.setInitialBoardState(),\n    };\n  }\n\n  // Sets winnable board from 10 random moves\n\n  setInitialBoardState() {\n    let initialBoard = [];\n\n    while (initialBoard.length < this.props.nrows) {\n      initialBoard.push(Array(this.props.ncols).fill(true));\n    }\n\n    return initialBoard;\n  }\n\n  initialShuffle(board) {\n    let count = 0;\n    const randomNumber = () => Math.floor(Math.random() * this.props.nrows);\n\n    while (count < 5) {\n      let y = randomNumber();\n      let x = randomNumber();\n\n      this.flipCellsAround(y, x, board);\n      count = count + 1;\n    }\n  }\n\n  createBoard() {\n    const board = [];\n    let singleRow = [];\n\n    this.state.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        singleRow.push(\n          <Cell\n            x={rowIndex}\n            y={cellIndex}\n            key={`${rowIndex}-${cellIndex}`}\n            flipCellsAround={this.flipCellsAround}\n            isLit={cell}\n            board={this.state.board}\n          />\n        );\n      });\n      board.push(<tr key={rowIndex}>{singleRow}</tr>);\n      singleRow = [];\n    });\n\n    return (\n      <table>\n        <tbody>{board}</tbody>\n      </table>\n    );\n  }\n\n  //flip clicked cell, and cells around\n  flipCellsAround(y, x, board) {\n    let newBoard = board;\n\n    board = this.flipCell(y, x, board);\n    board = this.flipCell(y - 1, x, board);\n    board = this.flipCell(y + 1, x, board);\n    board = this.flipCell(y, x - 1, board);\n    board = this.flipCell(y, x + 1, board);\n\n    this.setState(() => ({\n      board: newBoard,\n    }));\n\n    // win when every cell is turned off\n  }\n\n  flipCell(y, x, board) {\n    let newBoard = board;\n    let { ncols, nrows } = this.props;\n\n    // if this coord is actually on board, flip it\n\n    if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n      newBoard[y][x] = !newBoard[y][x];\n    }\n    return newBoard;\n  }\n\n  checkIfWin() {\n    if (this.state.board.every(row => row.every(cell => !cell))) {\n      this.setState(() => ({ hasWon: true }));\n    }\n  }\n\n  componentDidMount() {\n    this.initialShuffle(this.state.board);\n  }\n\n  restartBoard() {\n    let newBoard = this.setInitialBoardState();\n    this.initialShuffle(newBoard);\n\n    this.setState({ board: newBoard });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {!this.state.hasWon ? this.checkIfWin() : ''}\n\n        <div className=\"container\">\n          <div className=\"neon\">Lights </div>\n          <div className=\"flux\">Out </div>\n        </div>\n\n        {this.state.hasWon ? (\n          <div className=\"container\">\n            <div className=\"neon\">You</div> <div className=\"flux\"> Win! </div>\n            <button>Restart</button>\n          </div>\n        ) : (\n          <div className=\"boardContainer\">\n            <div className=\"Board\">{this.createBoard()}</div>\n            <button onClick={this.restartBoard}>Restart</button>\n          </div>\n        )}\n\n        <p>Turn off the lights!</p>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}